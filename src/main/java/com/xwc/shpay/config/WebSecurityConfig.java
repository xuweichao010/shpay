package com.xwc.shpay.config;import com.fasterxml.jackson.databind.ObjectMapper;import com.xwc.shpay.common.model.JsonMessage;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.authentication.AuthenticationTrustResolver;import org.springframework.security.authentication.AuthenticationTrustResolverImpl;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.annotation.web.configurers.LogoutConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.context.SecurityContext;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.context.SecurityContextHolderStrategy;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.AuthenticationEntryPoint;import org.springframework.security.web.access.AccessDeniedHandler;import org.springframework.security.web.authentication.AuthenticationFailureHandler;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;import org.springframework.security.web.context.HttpRequestResponseHolder;import org.springframework.security.web.context.HttpSessionSecurityContextRepository;import org.springframework.security.web.context.SaveContextOnUpdateOrErrorResponseWrapper;import org.springframework.security.web.context.SecurityContextRepository;import org.springframework.util.Assert;import org.springframework.util.ClassUtils;import org.springframework.web.util.WebUtils;import javax.servlet.AsyncContext;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.util.HashMap;import java.util.Map;/** * 创建人：徐卫超 * 时间：2019/12/18 10:16 * 功能： * 备注： */@Configuration@EnableWebSecuritypublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {//    private String[] permitPath = new String[]{//            "/api/swagger-ui.html",//            "/api/webjars/**",//            "/api/swagger-resources/**",//            "/api/v2/api-docs",//            "/api/auth/**",//            "/api/open/**",//            "auth/**",//            "open/**"//    };    private String[] permitPath = new String[]{            "/swagger-ui.html",            "/webjars/**",            "/swagger-resources/**",            "/v2/api-docs",            "/auth/**",            "/open/**"    };    @Override    public void configure(WebSecurity web) throws Exception {    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                ///访问拦截                .authorizeRequests()                .antMatchers(permitPath).permitAll()                .anyRequest().authenticated().and()                .csrf().disable()                //登录                .formLogin().loginPage("/swagger-ui.html")                .loginProcessingUrl("/auth/login")                .successHandler((request, response, authentication) -> {                    //登录成功                    response.setHeader("Content-Type", "application/json;charset=UTF-8");                    JsonMessage<Object> json = JsonMessage.succeed(request.getSession().getId());                    ObjectMapper objectMapper = new ObjectMapper();                    response.getWriter().write(objectMapper.writeValueAsString(json));                })                .failureHandler((request, response, exception) -> {                    //登录失败                    response.setHeader("Content-Type", "application/json;charset=UTF-8");                    JsonMessage<Object> json = JsonMessage.failed("登录失败");                    ObjectMapper objectMapper = new ObjectMapper();                    response.getWriter().write(objectMapper.writeValueAsString(json));                }).and()                //退出登录                .logout()                .logoutSuccessUrl("/auth/logout")                .logoutSuccessHandler((request, response, authentication) -> {                    //退出登录                    System.out.println(authentication);                    response.setHeader("Content-Type", "application/json;charset=UTF-8");                    JsonMessage<Object> json = JsonMessage.succeed("退出登录成功");                    ObjectMapper objectMapper = new ObjectMapper();                    response.getWriter().write(objectMapper.writeValueAsString(json));                }).and()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)                //.and().rememberMe().rememberMeServices(rememberMeServices()).tokenValiditySeconds(Constants.REMEMBER_LOGIN_TIME)                //异常处理                .and().exceptionHandling()                .accessDeniedHandler((request, response, accessDeniedException) -> {                    //未登录                    response.setHeader("Content-Type", "application/json;charset=UTF-8");                    JsonMessage<Object> json = JsonMessage.failed("访问受限",JsonMessage.NOT_AUTHEN,null);                    ObjectMapper objectMapper = new ObjectMapper();                    response.getWriter().write(objectMapper.writeValueAsString(json));                })                .authenticationEntryPoint((request, response, authException) -> {                    response.setHeader("Content-Type", "application/json;charset=UTF-8");                    JsonMessage<Object> json = JsonMessage.failed("访问受限",JsonMessage.NOT_PRIVILEGE,null);                    ObjectMapper objectMapper = new ObjectMapper();                    response.getWriter().write(objectMapper.writeValueAsString(json));                });        ;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new PasswordEncoder() {            @Override            public String encode(CharSequence rawPassword) {                return rawPassword.toString();            }            @Override            public boolean matches(CharSequence rawPassword, String encodedPassword) {                return rawPassword.equals(encodedPassword);            }        };    }}