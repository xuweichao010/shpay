package com.xwc.shpay.common.model;import java.time.LocalDateTime;import java.time.ZoneId;import java.time.format.DateTimeFormatter;import java.util.Date;/** * 创建人：徐卫超 * 时间：2019/11/12 14:17 * 功能： * 备注： */public class DateTime {    public static final String CHINA = "Asia/Shanghai";    public static final String DATE_TIME = "yyyy-MM-dd HH:mm:ss";    private LocalDateTime time;    public DateTime() {        this.time = LocalDateTime.now();    }    public DateTime(LocalDateTime localDateTime) {        this.time = LocalDateTime.now();    }    public DateTime(Date date) {        this.time = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());    }    public DateTime(Date date, String zoneId) {        this.time = LocalDateTime.ofInstant(date.toInstant(), ZoneId.of(zoneId));    }    public Date getTime() {        return Date.from(time.atZone(ZoneId.systemDefault()).toInstant());    }    public String toString() {        return time.format(DateTimeFormatter.ofPattern(DATE_TIME));    }    public String toString(String formatter) {        return time.format(DateTimeFormatter.ofPattern(DATE_TIME));    }    public static DateTime parse(String date) {        return parse(date, DATE_TIME);    }    public static DateTime parse(String date, String formatter) {        return new DateTime(LocalDateTime.parse(date, DateTimeFormatter.ofPattern(formatter)));    }    public DateTime addMonths(int months) {        time = months > 0 ? time.plusMonths(months) : time.minusMonths(Math.abs(months));        return this;    }    public DateTime setMonth(int month) {        time = time.withMonth(month);        return this;    }    public DateTime addDays(int days) {        time = days > 0 ? time.plusDays(days) : time.minusDays(Math.abs(days));        return this;    }    public DateTime setDayOfMonth(int day) {        time = time.withDayOfMonth(day);        return this;    }    public DateTime addHours(int hours) {        time = hours > 0 ? time.plusHours(hours) : time.minusHours(Math.abs(hours));        return this;    }    public DateTime setHours(int hour) {        time = time.withHour(hour);        return this;    }    public DateTime addMinutes(int minutes) {        time = minutes > 0 ? time.plusMinutes(minutes) : time.minusMinutes(Math.abs(minutes));        return this;    }    public DateTime setMinute(int minute) {        time = time.withMinute(minute);        return this;    }    public DateTime setNano(int minute) {        time = time.withNano(minute);        return this;    }    public DateTime addSeconds(int seconds) {        time = seconds > 0 ? time.plusSeconds(seconds) : time.minusSeconds(Math.abs(seconds));        return this;    }    public DateTime setSecond(int second) {        time = time.withSecond(second);        return this;    }    public DateTime maxOfDay() {        time = this.setHours(23).setMinute(59).setSecond(59).time;        return this;    }    public DateTime minOfDay() {        time = this.setHours(0).setMinute(0).setSecond(0).setNano(0).time;        return this;    }}